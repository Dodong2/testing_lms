generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

//for users
model User {
  id       String    @id @default(cuid())
  name     String
  email    String    @unique
  role     Role      @default(BENEFICIARY)
  image    String?
  accounts Account[]
  sessions Session[]

  Program Program[]

  ProgramMember ProgramMember[]

  posts    Post[]    @relation("UserPosts")
  comments Comment[] @relation("UserComments")

  Feedback     Feedback[]
  Notification Notification[]

  Meeting Meeting[]

  Submission Submission[]

  JoinRequest JoinRequest[]

  createdAt DateTime @default(now())
}

//account for google auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

//roles
enum Role {
  ADMIN
  INSTRUCTOR
  BENEFICIARY
}

//for sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Program {
  id          String          @id @default(cuid())
  title       String
  subtitle    String
  explanation String
  createdAt   DateTime        @default(now())
  adminId     String
  admin       User            @relation(fields: [adminId], references: [id], onDelete: Cascade)
  members     ProgramMember[]
  posts       Post[]

  Feedback Feedback[]

  Meeting Meeting[]

  JoinRequest JoinRequest[]
}

model ProgramMember {
  id        String  @id @default(cuid())
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([programId, userId])
}

model Post {
  id        String    @id @default(cuid())
  title     String?
  content   String
  programId String
  authorId  String
  tag       PostTag   @default(NORMAL)
  deadline  DateTime?
  files     Json?
  program   Program   @relation(fields: [programId], references: [id], onDelete: Cascade)
  author    User      @relation("UserPosts", fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  createdAt DateTime  @default(now())

  Submission Submission[]
}

enum PostTag {
  ANNOUNCEMENT
  TASK
  NORMAL
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User     @relation("UserComments", fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Feedback {
  id          String  @id @default(cuid())
  subject     String
  description String
  type        String
  visibility  String
  programId   String
  program     Program @relation(fields: [programId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Notification {
  id          String           @id @default(cuid())
  type        NotificationType
  message     String
  read        Boolean          @default(false)
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  referenceId String?
  createdAt   DateTime         @default(now())

  @@index([userId])
}

enum NotificationType {
  FEEDBACK
  TASK
  PROGRAM
  SYSTEM
}

model Meeting {
  id        String   @id @default(cuid())
  title     String
  link      String
  startTime DateTime
  endTime   DateTime
  expiresAt DateTime
  createdAt DateTime @default(now())

  programId String
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  createdBy String
  user      User    @relation(fields: [createdBy], references: [id], onDelete: Cascade)
}

model Submission {
  id          String    @id @default(cuid())
  postId      String
  post        Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  studentId   String
  student     User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  files       Json?
  links       String
  grade       Int?
  feedback    String?
  submittedAt DateTime  @default(now())
  gradedAt    DateTime?
}

model JoinRequest {
  id        String     @id @default(cuid())
  program   Program    @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  status    JoinStatus @default(PENDING)
  createdAt DateTime   @default(now())
}

enum JoinStatus {
  PENDING
  APPROVED
  REJECTED
}
