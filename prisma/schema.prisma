generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

//for sample task
model Task {
  id        String   @id @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//for users
model User {
  id       String    @id @default(cuid())
  name     String
  email    String    @unique
  role     Role      @default(BENEFICIARY)
  image    String?
  accounts Account[]
  sessions Session[]

  Program Program[]

  ProgramMember ProgramMember[]

  posts    Post[]    @relation("UserPosts")
  comments Comment[] @relation("UserComments")

  Feedback          Feedback[]
  Assignment        Assignment[]
  Submission        Submission[]
  gradedSubmissions Submission[] @relation("GradedBy")
}

//account for google auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

//roles
enum Role {
  ADMIN
  INSTRUCTOR
  BENEFICIARY
}

//for sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Program {
  id          String          @id @default(cuid())
  title       String
  subtitle    String
  explanation String
  createdAt   DateTime        @default(now())
  adminId     String
  admin       User            @relation(fields: [adminId], references: [id], onDelete: Cascade)
  members     ProgramMember[]
  posts       Post[]

  Feedback   Feedback[]
  Assignment Assignment[]
}

model ProgramMember {
  id        String  @id @default(cuid())
  program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)
  programId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([programId, userId])
}

model Post {
  id        String    @id @default(cuid())
  content   String
  programId String
  authorId  String
  program   Program   @relation(fields: [programId], references: [id], onDelete: Cascade)
  author    User      @relation("UserPosts", fields: [authorId], references: [id], onDelete: Cascade)
  comments  Comment[]
  createdAt DateTime  @default(now())
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User     @relation("UserComments", fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Feedback {
  id          String  @id @default(cuid())
  subject     String
  description String
  type        String
  visibility  String
  programId   String
  program     Program @relation(fields: [programId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Assignment {
  id          String       @id @default(cuid())
  programId   String
  program     Program      @relation(fields: [programId], references: [id], onDelete: Cascade)
  title       String
  description String?
  attachments Json?
  dueDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  createdById String
  createdBy   User         @relation(fields: [createdById], references: [id], onDelete: Cascade)
  submissions Submission[]
}

model Submission {
  id           String     @id @default(cuid())
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  submitterId  String
  submitter    User       @relation(fields: [submitterId], references: [id], onDelete: Cascade)
  files        Json
  comment      String?
  grade        Int?
  gradedById   String?
  gradedBy     User?      @relation("GradedBy", fields: [gradedById], references: [id], onDelete: SetNull)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}
